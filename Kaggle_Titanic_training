import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as ss
import math
sns.set(style="whitegrid", palette = 'muted')
from collections import Counter                      # don't need?
import warnings
warnings.filterwarnings('ignore')
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV      #Interesting and important thing. Work with it more later
from sklearn.metrics import make_scorer
from sklearn.metrics import accuracy_score

path1 = '../input/train.csv'
train_data = pd.read_csv(path1, sep=',')  
path2 = '../input/test.csv'  # load the competition test data
test_data = pd.read_csv(path2, sep=',')
data = train_data.append(test_data, sort=False)   #Append rows of data2 to data1
train_len = len(train_data)

data['Sex'] = data['Sex'].map({'male': 1, 'female': 0})  #set Sex in categorical values
data['Embarked'] = data['Embarked'].fillna('S')      #set missing Embarked with the most common S(Southampton)
data['FamSize'] = data.SibSp + data.Parch + 1       #New column 

data['Title'] = data.Name  # for now copy name directly
def extract_title(x):   # x is entire row
    string=x['Title']
    ix = string.find(".")    # use .find to find the first dot
    for i in range(0,ix):
        if (string[ix-i] == ' '):  # if we find space, then stop iterating
            break                   # break out of for-loop
    return string[(ix-i+1):ix]  # return everything after space up till before the dot
data['Title']=data.apply(extract_title, axis=1)
 
index_NaN_age = list(data["Age"][data["Age"].isnull()].index)         
for i in index_NaN_age :                                   #substitute nans in 'Age' with median values
    age_med = data["Age"].median()
    age_pred = data["Age"][((data['SibSp'] == data.iloc[i]["SibSp"]) & 
                               (data['Parch'] == data.iloc[i]["Parch"]) & 
                               (data['Pclass'] == data.iloc[i]["Pclass"]))].median()
    if not np.isnan(age_pred) :
        data['Age'].loc[i] = age_pred
    else :
        data['Age'].loc[i] = age_med

data['Fare'] = data['Fare'].fillna(data['Fare'].median())       #working with ['Fare']
#data['Fare'] = data['Fare'].map(lambda i: np.log(i) if i > 0 else 0)

data["Title"] = data["Title"].replace(['Lady', 'the Countess','Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')
data["Title"] = data["Title"].map({"Master":0, "Miss":1, "Ms" : 1 , "Mme":1, "Mlle":1, "Mrs":1, "Mr":2, "Rare":3})
data["Title"] = data["Title"].astype(int)
data.drop(labels=['Name'], axis=1, inplace=True)  # we can even drop the 'Name' column now 

data["Cabin"] = pd.Series([i[0] if not pd.isnull(i) else 'X' for i in data['Cabin'] ])

Ticket = []
for i in list(data.Ticket):
    if not i.isdigit() :
        Ticket.append(i.replace(".","").replace("/","").strip().split(' ')[0]) #Take prefix
    else:
        Ticket.append("X")
        
data["Ticket"] = Ticket
data["Ticket"].head()
data = pd.get_dummies(data, columns = ["Ticket"], prefix="T")
data["Pclass"] = data["Pclass"].astype("category")
data = pd.get_dummies(data, columns = ["Pclass"],prefix="Pc")
data = pd.get_dummies(data, columns = ["Title"],prefix="Title")
data = pd.get_dummies(data, columns = ["Embarked"],prefix="Emb")
data = pd.get_dummies(data, columns = ["Cabin"],prefix="Cabin")

train = data[:train_len]
test = data[train_len:]
test.drop(labels=["Survived"],axis = 1,inplace=True)
train["Survived"] = train["Survived"].astype(int)
Y_train = train["Survived"]
X_train = train.drop(labels = ["Survived"],axis = 1)
IDtest = test["PassengerId"]  

clf = RandomForestClassifier(random_state = 0, oob_score = True)

model = clf.fit(X_train, Y_train)
predictions = pd.Series(model.predict(test), name = 'Survived')

results = pd.concat([IDtest, predictions],axis=1)
results.to_csv("Titanic-mutanic.csv",index=False)
